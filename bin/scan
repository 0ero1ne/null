#!/usr//bin/env python3
# nmap parser
# 0.9-b2
# nmap parser with some cool features

# TODO
# - improve arguments handle
# EOT


# Libraries
import subprocess
import socket
import sys
import requests
import time
import sys
import os


# Global variables
class self:
	cmd = []
	old_clients = []
	clients = []

# Logo
def logo():
    print("""\x1b[1;32m
                                  .::!!!!!!!:.
.!!!!!:.                        .:!!!!!!!!!!!!
~~~~!!!!!!.                 .:!!!!!!!!!UWWW$$$
    :$$NWX!!:           .:!!!!!!XUWW$$$$$$$$$P
    $$$$$##WX!:      .<!!!!UW$$$$"  $$$$$$$$#
    $$$$$  $$$UX   :!!UW$$$$$$$$$   4$$$$$*
    ^$$$B  $$$$\\     $$$$$$$$$$$$   d$$R"
      "*$bd$$$$      '*$$$$$$$$$$$o+#"
           ````          ```````
              \x1b[1;31mI see you...
""", end='\n')


# Get the local IP
def get_ip_address():
    # Get the IP through a socket
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80))
    return s.getsockname()[0]


# Up - Down
def up():
	# Iterate through active clients
	for y in self.clients:
		# If the client is not in old list gets add
		if y not in self.old_clients:
			self.old_clients.append(y)
			
			# Check if voice command is in arguments list
			if "-v" in self.cmd:
				# Voice connected
				up="say -v Alex "+y+" connected."
				os.system(up)

			# If alert is on display notification 
			if "-a" in self.cmd:
				alert="osascript -e 'display notification \""+y+" connected\" with title \"scan\" sound name \"Hero\"'"
				os.system(alert)

	# Iterate through old clients for disconnected clients
	for index,x in enumerate(self.old_clients):
		# If old client not in the list of actives
		if x not in self.clients:

			# Check if voice command is in arguments list
			if "-v" in self.cmd:
				# Voice disconnected
				up="say -v Alex "+y+" connected."
				os.system(up)

			# If alert is on display notification
			if "-a" in self.cmd:
				alert="osascript -e 'display notification \""+y+" disconnected\" with title \"scan\" sound name \"Hero\"'"
				os.system(alert)
			
			# Remove client from old list
			self.old_clients.pop(index)		


# Scan function
def scan():
		# Setting variables
		ip=get_ip_address()
		subnet="24"
		self.clients = []

		# Outputs
		os.system("clear")
		logo()

		# Nmap process
		p = str(str(subprocess.Popen(
	                                	[r"sudo","nmap","-sn",ip+"/"+subnet],
	                                	stdout=subprocess.PIPE).communicate()
	                                	).split('\\n')).split('Nmap')[2:-2]

		# Parse data
		for x in p:
			# Get name
			if len(str(x.split(",")[0]).split(" ")) < 6:
				name = "Unknown"
			else:
				name = str(x.split(",")[0]).split(" ")[4]

			ip = str(str(x.split(",")[0]).split(" ")[-1]).translate({ord(i): None for i in '()'})[:-1]
			mac = str(x.split(",")[2]).split(" ")[3]
			nvendor = x.split("(")[-1][:-5]
	
			# Output
			print("\x1b[1;32mName:\x1b[1;33m",name+"\x1b[0m")
			print("\x1b[1;32mIP:\x1b[1;33m",ip+"\x1b[0m")
			print("\x1b[1;32mMAC:\x1b[1;33m",mac+"\x1b[0m")

			# Request from macvendors.com
			vendor = requests.get("https://api.macvendors.com/"+mac)

			# If response is 200
			if vendor.status_code == 200:
				print("\x1b[1;32mVendor:\x1b[1;33m",vendor.text,"\n"+"\x1b[0m")
			else:
				print("\x1b[1;32mVendor:\x1b[1;33m",nvendor,"\n"+"\x1b[0m")

			# Add name to client list
			self.clients.append(name)

			# Sleep time for macvendors request
			time.sleep(0.5)

# Main function
def main():
	try:
		# Check for any arguments
		if len(sys.argv) > 1:
			# Store arguments in a list
			for arg in sys.argv[1:]:
				self.cmd.append(arg)

			# Needs improvements
			# Help
			if "-help" in self.cmd:
				print("Usage: scan -l [loop mode] -v [voice] -a [alert]")

			# If loop option
			elif "-l" in self.cmd:		
					while True:
						scan()
						up()
						time.sleep(5)		
		# If no arguments do a one-time scan
		else:
			scan()

	# If CTRL-C print exit message
	except KeyboardInterrupt:
		print('Exit')

# run
main()